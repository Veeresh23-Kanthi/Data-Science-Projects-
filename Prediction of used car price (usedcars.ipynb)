{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "tBCnY8EE5aNj"
      },
      "source": [
        "import pandas as pd       #importing pandas\n",
        "import numpy as np        #importing numpy\n",
        "import matplotlib.pyplot as plt   #importing matplotlib\n",
        "import seaborn as sns     #import seaborn\n",
        "from matplotlib import style  #import matplot\n",
        "from sklearn.preprocessing import scale, LabelEncoder #import Scale and LabelEncoder\n",
        "style.use('ggplot')\n",
        "%matplotlib inline"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lLZDfnqVFd1h",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a1f6f166-247b-4062-80c2-27a24f638e2e"
      },
      "source": [
        "#mount drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JHT3Z7o-6lCA"
      },
      "source": [
        "usedcars=pd.read_excel('/content/drive/My Drive/Data_Train.xlsx')     #reading the data"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1NUgAdrO8Q_u",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "390686e6-f3c7-48e7-efdb-9d471da2f3bc"
      },
      "source": [
        "usedcars.shape  #check the shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(6019, 13)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qRez4Dtu7ATI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "outputId": "35434273-a766-45de-9096-3840c10b293d"
      },
      "source": [
        "usedcars.head()   #checking the head of data"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Location</th>\n",
              "      <th>Year</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_Price</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Maruti Wagon R LXI CNG</td>\n",
              "      <td>Mumbai</td>\n",
              "      <td>2010</td>\n",
              "      <td>72000</td>\n",
              "      <td>CNG</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>26.6 km/kg</td>\n",
              "      <td>998 CC</td>\n",
              "      <td>58.16 bhp</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Hyundai Creta 1.6 CRDi SX Option</td>\n",
              "      <td>Pune</td>\n",
              "      <td>2015</td>\n",
              "      <td>41000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>19.67 kmpl</td>\n",
              "      <td>1582 CC</td>\n",
              "      <td>126.2 bhp</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Honda Jazz V</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>2011</td>\n",
              "      <td>46000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>18.2 kmpl</td>\n",
              "      <td>1199 CC</td>\n",
              "      <td>88.7 bhp</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.61 Lakh</td>\n",
              "      <td>4.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Maruti Ertiga VDI</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>2012</td>\n",
              "      <td>87000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>20.77 kmpl</td>\n",
              "      <td>1248 CC</td>\n",
              "      <td>88.76 bhp</td>\n",
              "      <td>7.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Audi A4 New 2.0 TDI Multitronic</td>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>2013</td>\n",
              "      <td>40670</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Second</td>\n",
              "      <td>15.2 kmpl</td>\n",
              "      <td>1968 CC</td>\n",
              "      <td>140.8 bhp</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>17.74</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                               Name    Location  Year  ...  Seats  New_Price  Price\n",
              "0            Maruti Wagon R LXI CNG      Mumbai  2010  ...    5.0        NaN   1.75\n",
              "1  Hyundai Creta 1.6 CRDi SX Option        Pune  2015  ...    5.0        NaN  12.50\n",
              "2                      Honda Jazz V     Chennai  2011  ...    5.0  8.61 Lakh   4.50\n",
              "3                 Maruti Ertiga VDI     Chennai  2012  ...    7.0        NaN   6.00\n",
              "4   Audi A4 New 2.0 TDI Multitronic  Coimbatore  2013  ...    5.0        NaN  17.74\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "R578yvLATtaP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XdHjzP-XTYHM",
        "outputId": "c4afc4ae-503f-4a33-9813-c9f1a0f39778"
      },
      "source": [
        "usedcars['Year'].unique()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2010, 2015, 2011, 2012, 2013, 2016, 2018, 2014, 2017, 2007, 2009,\n",
              "       2008, 2019, 2006, 2005, 2004, 2002, 2000, 2003, 1999, 2001, 1998])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EEdbDul1kiWK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1460b8f8-9bed-438a-af63-014fa6883e5f"
      },
      "source": [
        "usedcars.info()   #checking the information of the dataset"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 6019 entries, 0 to 6018\n",
            "Data columns (total 13 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   Name               6019 non-null   object \n",
            " 1   Location           6019 non-null   object \n",
            " 2   Year               6019 non-null   int64  \n",
            " 3   Kilometers_Driven  6019 non-null   int64  \n",
            " 4   Fuel_Type          6019 non-null   object \n",
            " 5   Transmission       6019 non-null   object \n",
            " 6   Owner_Type         6019 non-null   object \n",
            " 7   Mileage            6017 non-null   object \n",
            " 8   Engine             5983 non-null   object \n",
            " 9   Power              5983 non-null   object \n",
            " 10  Seats              5977 non-null   float64\n",
            " 11  New_Price          824 non-null    object \n",
            " 12  Price              6019 non-null   float64\n",
            "dtypes: float64(2), int64(2), object(9)\n",
            "memory usage: 611.4+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CcT2jC360HJr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f51bb2b3-435a-4969-b921-6b89888c0aec"
      },
      "source": [
        "usedcars.apply(lambda x: x.isnull().sum())    #checking the null values"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Name                    0\n",
              "Location                0\n",
              "Year                    0\n",
              "Kilometers_Driven       0\n",
              "Fuel_Type               0\n",
              "Transmission            0\n",
              "Owner_Type              0\n",
              "Mileage                 2\n",
              "Engine                 36\n",
              "Power                  36\n",
              "Seats                  42\n",
              "New_Price            5195\n",
              "Price                   0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "63i5qVIvH1Xs"
      },
      "source": [
        "There are 5195 null values in new price that is more than 90% of data is null in New_Price feature. Drop the new_feature colun"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o3h69UZllvBo"
      },
      "source": [
        "usedcars.drop('New_Price',axis=1, inplace=True)  #drop New_Price"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ouaZBl31T4b3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c385e6e9-c9ad-4676-b37c-3685ed21e15a"
      },
      "source": [
        "usedcars.dropna(axis=0, inplace=True)  #there are only fe Na values so we can drop those records\n",
        "usedcars.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5975, 12)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hpRnTHoyGyxq"
      },
      "source": [
        "usedcars['Power'] = usedcars['Power'].str.replace('bhp',\" \")  #remove bhp from Power"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NcpgSZ7xInu0"
      },
      "source": [
        "usedcars['Mileage']= usedcars['Mileage'].str.replace('km/kg',\" \") #remove 'km/kg' from Power\n",
        "usedcars['Mileage']= usedcars['Mileage'].str.replace('kmpl',\" \") #remove kmpl from Power"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "20aLEJJcXs0H"
      },
      "source": [
        "usedcars['Engine']= usedcars['Engine'].str.replace('CC',\" \")  #remove CC"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s18KUtJbKjQN"
      },
      "source": [
        "When you look at the first name of the car. The first word is the Manufacturer name. So we will make a new feature manufacturer."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yi_0XkSnYIcy"
      },
      "source": [
        "#creating a new feature manufacturer\n",
        "Manufacturer = []   #create a empty list\n",
        "for i in usedcars['Name'].str.split(' ',):  #split the sentence by white space \" \"\n",
        "  Manufacturer.append(i[0])      ##append empty list with the first word after split\n",
        "\n",
        "usedcars['Manufacturer'] = Manufacturer   #create a new feature 'Manufacturer'\n",
        "usedcars.drop('Name',axis=1,inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E2j4AjVSYI0H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d82d9e2c-bfc8-42ee-9fbd-92faed59be85"
      },
      "source": [
        "print(usedcars['Manufacturer'].head())   #check the head of of Manufacturer column"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0     Maruti\n",
            "1    Hyundai\n",
            "2      Honda\n",
            "3     Maruti\n",
            "4       Audi\n",
            "Name: Manufacturer, dtype: object\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZPZIbscSU9PD",
        "outputId": "be700a74-646d-4d12-e854-83095274df93"
      },
      "source": [
        "usedcars['Manufacturer'].unique()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Maruti', 'Hyundai', 'Honda', 'Audi', 'Nissan', 'Toyota',\n",
              "       'Volkswagen', 'Tata', 'Land', 'Mitsubishi', 'Renault',\n",
              "       'Mercedes-Benz', 'BMW', 'Mahindra', 'Ford', 'Porsche', 'Datsun',\n",
              "       'Jaguar', 'Volvo', 'Chevrolet', 'Skoda', 'Mini', 'Fiat', 'Jeep',\n",
              "       'Smart', 'Ambassador', 'Isuzu', 'ISUZU', 'Force', 'Bentley',\n",
              "       'Lamborghini'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RBf2FCI2YvBU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        },
        "outputId": "50f0a656-2ac7-45d9-8641-bd527a1257b4"
      },
      "source": [
        "usedcars.head() #check the head of the datset"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Year</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>Price</th>\n",
              "      <th>Manufacturer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Mumbai</td>\n",
              "      <td>2010</td>\n",
              "      <td>72000</td>\n",
              "      <td>CNG</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>26.6</td>\n",
              "      <td>998</td>\n",
              "      <td>58.16</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.75</td>\n",
              "      <td>Maruti</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Pune</td>\n",
              "      <td>2015</td>\n",
              "      <td>41000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>19.67</td>\n",
              "      <td>1582</td>\n",
              "      <td>126.2</td>\n",
              "      <td>5.0</td>\n",
              "      <td>12.50</td>\n",
              "      <td>Hyundai</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>2011</td>\n",
              "      <td>46000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>18.2</td>\n",
              "      <td>1199</td>\n",
              "      <td>88.7</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.50</td>\n",
              "      <td>Honda</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>2012</td>\n",
              "      <td>87000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>20.77</td>\n",
              "      <td>1248</td>\n",
              "      <td>88.76</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.00</td>\n",
              "      <td>Maruti</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>2013</td>\n",
              "      <td>40670</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Second</td>\n",
              "      <td>15.2</td>\n",
              "      <td>1968</td>\n",
              "      <td>140.8</td>\n",
              "      <td>5.0</td>\n",
              "      <td>17.74</td>\n",
              "      <td>Audi</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     Location  Year  Kilometers_Driven  ... Seats  Price Manufacturer\n",
              "0      Mumbai  2010              72000  ...   5.0   1.75       Maruti\n",
              "1        Pune  2015              41000  ...   5.0  12.50      Hyundai\n",
              "2     Chennai  2011              46000  ...   5.0   4.50        Honda\n",
              "3     Chennai  2012              87000  ...   7.0   6.00       Maruti\n",
              "4  Coimbatore  2013              40670  ...   5.0  17.74         Audi\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2THbNwQMQnk3"
      },
      "source": [
        "#create new feature age of the car\n",
        "usedcars['Age'] = (2019 - usedcars['Year'])\n",
        "usedcars.drop('Year',axis=1 , inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WbroS6zLYy67",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7aabbaf1-ed09-4870-8fec-92ed91f04a96"
      },
      "source": [
        "#check unique values in categorical columns\n",
        "usedcars[['Location','Fuel_Type','Transmission','Owner_Type','Manufacturer','Age']].apply(lambda x : x.nunique())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Location        11\n",
              "Fuel_Type        4\n",
              "Transmission     2\n",
              "Owner_Type       4\n",
              "Manufacturer    31\n",
              "Age             22\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bzRDmxeTUojL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        },
        "outputId": "74cc79e4-f2c9-44e5-dbb7-ab4f8b0e5acc"
      },
      "source": [
        "usedcars.head()  #check head"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>Price</th>\n",
              "      <th>Manufacturer</th>\n",
              "      <th>Age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Mumbai</td>\n",
              "      <td>72000</td>\n",
              "      <td>CNG</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>26.6</td>\n",
              "      <td>998</td>\n",
              "      <td>58.16</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.75</td>\n",
              "      <td>Maruti</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Pune</td>\n",
              "      <td>41000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>19.67</td>\n",
              "      <td>1582</td>\n",
              "      <td>126.2</td>\n",
              "      <td>5.0</td>\n",
              "      <td>12.50</td>\n",
              "      <td>Hyundai</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>46000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>18.2</td>\n",
              "      <td>1199</td>\n",
              "      <td>88.7</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.50</td>\n",
              "      <td>Honda</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>87000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>20.77</td>\n",
              "      <td>1248</td>\n",
              "      <td>88.76</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.00</td>\n",
              "      <td>Maruti</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>40670</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Second</td>\n",
              "      <td>15.2</td>\n",
              "      <td>1968</td>\n",
              "      <td>140.8</td>\n",
              "      <td>5.0</td>\n",
              "      <td>17.74</td>\n",
              "      <td>Audi</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     Location  Kilometers_Driven Fuel_Type  ...  Price Manufacturer Age\n",
              "0      Mumbai              72000       CNG  ...   1.75       Maruti   9\n",
              "1        Pune              41000    Diesel  ...  12.50      Hyundai   4\n",
              "2     Chennai              46000    Petrol  ...   4.50        Honda   8\n",
              "3     Chennai              87000    Diesel  ...   6.00       Maruti   7\n",
              "4  Coimbatore              40670    Diesel  ...  17.74         Audi   6\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uLoI1nKBUm8B"
      },
      "source": [],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VPO4R2FcTj-R"
      },
      "source": [
        "usedcars['Year'] = usedcars['Year'].astype('object')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "NNcvt9U_RafJ",
        "outputId": "46f108b0-fc7f-4f4e-ee08-edb5a24b2d0a"
      },
      "source": [
        "plt.figure(figsize=(12,20))\n",
        "sns.boxplot(x='Price',y='Manufacturer',data=usedcars)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f86643c8f98>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 100
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x1440 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WamEx5xjVOT7"
      },
      "source": [],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 517
        },
        "id": "2X7nNp6qUKcn",
        "outputId": "10e1d12d-589c-4db7-d7aa-5fe0cb42ac6f"
      },
      "source": [
        "plt.figure(figsize=(12,8))\n",
        "sns.boxplot(x = 'Price',y='Location',data=usedcars)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f867d496a90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 72
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5BZ_BgH88U2z"
      },
      "source": [
        "#replace string 'null' with 0\n",
        "usedcars['Power'] = usedcars['Power'].str.replace('null','0')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t-iGqknXwhoz"
      },
      "source": [
        "usedcars.drop(usedcars[usedcars['Power'] == 0].index, inplace = True)   #drop the records where power = 0"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8d58TLX25f7T"
      },
      "source": [
        "#convert to numeric feature\n",
        "cols = ['Kilometers_Driven','Mileage','Engine','Power']\n",
        "for col in cols:\n",
        "  usedcars[col]=pd.to_numeric(usedcars[col])\n",
        "usedcars['Age'] = pd.Categorical(usedcars.Age)  #convert the age to categorical feature"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SvS5VbsiBoks",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e206d2be-5b2e-4898-f2ad-2b7aa6867b0e"
      },
      "source": [
        "usedcars.info()  #check the info"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 5975 entries, 0 to 6018\n",
            "Data columns (total 12 columns):\n",
            " #   Column             Non-Null Count  Dtype   \n",
            "---  ------             --------------  -----   \n",
            " 0   Location           5975 non-null   object  \n",
            " 1   Kilometers_Driven  5975 non-null   int64   \n",
            " 2   Fuel_Type          5975 non-null   object  \n",
            " 3   Transmission       5975 non-null   object  \n",
            " 4   Owner_Type         5975 non-null   object  \n",
            " 5   Mileage            5975 non-null   float64 \n",
            " 6   Engine             5975 non-null   int64   \n",
            " 7   Power              5975 non-null   float64 \n",
            " 8   Seats              5975 non-null   float64 \n",
            " 9   Price              5975 non-null   float64 \n",
            " 10  Manufacturer       5975 non-null   object  \n",
            " 11  Age                5975 non-null   category\n",
            "dtypes: category(1), float64(4), int64(2), object(5)\n",
            "memory usage: 726.8+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lTdtpuDEdQ9M"
      },
      "source": [
        "###Let's Perform some Hypothesis Testing now."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aK-z7Us5dXZH"
      },
      "source": [
        "Check whether the cars Price is dependent on Transmission type or not."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GMps_RqjddLT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "outputId": "fee4bb4a-b8fd-4f6b-940f-5864837a2ada"
      },
      "source": [
        "usedcars.groupby('Transmission')['Price'].plot(kind='box',)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Transmission\n",
              "Automatic    AxesSubplot(0.125,0.125;0.775x0.755)\n",
              "Manual       AxesSubplot(0.125,0.125;0.775x0.755)\n",
              "Name: Price, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AAkmedF3eCKb"
      },
      "source": [
        "The mean of Automatic Transmission Type is 19.87 and mean of Manual Transmission is 5.34. Clearly there's aa difference in the mean. Let's Check whether this difference is statsically significant or not."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9A54DjAxevyq"
      },
      "source": [
        "#create samples for manual and automatic transmissions\n",
        "sample_01 = usedcars[usedcars['Transmission'] == 'Automatic']\n",
        "sample_02 = usedcars[usedcars['Transmission'] == 'Manual']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "782cQdscf5g7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "be306314-7e2d-4ad8-a142-13f89214c801"
      },
      "source": [
        "print(sample_01.shape,sample_02.shape)  #check the shape of the samples"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(1709, 12) (4266, 12)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J3JCA2ofgGg7"
      },
      "source": [
        "We have 1709 samples in sample_01 and 4266 in sample_02 make equal number of samples in both the groups."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gwUFeNEugGN5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "821dd5e6-d412-4d6e-9983-ff629d5a04ab"
      },
      "source": [
        "sample_02 = sample_02.sample(1709)\n",
        "print(sample_01.shape,sample_02.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(1709, 12) (1709, 12)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jeR1hZ18eb8x"
      },
      "source": [
        "Start with checking some assumptions."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "al7frFMqg7UR"
      },
      "source": [
        "#Levene's test to check whether the variances of the two group are same.\n",
        "#H0 : Variances are same.\n",
        "#H1 : Variances are not same.\n",
        "#Alpha = 0.05%\n",
        "#if p-value > alpha (Cannot reject H0)\n",
        "#if p-value < alpha (Accept null hypothesis)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DhShun3-d_zZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "51ad8563-2f5f-4819-afbc-1fb65d81248c"
      },
      "source": [
        "from scipy import stats\n",
        "\n",
        "alpha = 0.05\n",
        "Stats,Pvalue = stats.levene(sample_01['Price'],sample_01['Price'])\n",
        "print(f' Test statistics : {Stats} \\n Alpha : {alpha} \\n P-value : {Pvalue}')\n",
        "if Pvalue > alpha:\n",
        "  print(' Variances are same accept null hypothesis ')\n",
        "else:\n",
        "  print(' Variances are not same reject not null hypothesis ')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " Test statistics : 0.0 \n",
            " Alpha : 0.05 \n",
            " P-value : 1.0\n",
            " Variances are same accept null hypothesis \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dCZt726NhUrc"
      },
      "source": [
        "Check The assumption for normality"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8CRvY6YdhT6O",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        },
        "outputId": "e93ac712-8693-4280-d95f-26279e092b4f"
      },
      "source": [
        "#we will take the difference b/w sample_01 and sample_02 and plot a histogram to check for normality\n",
        "#we will scale the difference\n",
        "diff = scale((np.array(sample_01['Price']) - np.array(sample_02['Price'])))\n",
        "plt.figure(figsize=(12,6))\n",
        "plt.hist(diff)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JBtTCh9MhuHB"
      },
      "source": [
        "Our Data Doesn't looks normally distributed."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XltR15nyiJ2H",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "outputId": "51a9cb07-9db4-4409-e783-9e8905655173"
      },
      "source": [
        "#q-q plot to check normality\n",
        "#q-q plot to check the normality\n",
        "plt.figure(figsize=(12,6))\n",
        "stats.probplot(diff,plot=plt,dist='norm')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CWbzHtm_j5K6"
      },
      "source": [
        "By seeing graphically we have seen that our data voilates the assumption of normality. Let's check it with statstical techniques."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sv_WHKCJkhGZ"
      },
      "source": [
        "#Stastical test for checking normality\n",
        "#Shapiro-wilk test\n",
        "#H0 : Normally distributed\n",
        "#H1 : Not Normally distributed"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OPels1kTkiXs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f1d48b99-2250-4840-c2b8-abf3a4d178ae"
      },
      "source": [
        "alpha = 0.05\n",
        "statistic,p_value = stats.shapiro(diff)\n",
        "if p_value > alpha:\n",
        "  print(f'Accept Null Hypothesis p-value : {p_value}')\n",
        "else:\n",
        "  print(f'Reject Null Hypothesis p-value : {p_value}')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Reject Null Hypothesis p-value : 2.6855334755336365e-34\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P1iO9mHQksGk"
      },
      "source": [
        "We have checked statstically as well as visually. Our data is not normally distributed. And it voilates our assumption of normality."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n1-nzJ1Zr8R0"
      },
      "source": [
        "Our data voilates the assumption of normality. There are chances that outliers might be present in our data. We can also apply different transformations to make our data normally distributed. But those concepts are beyond the scope of this book. We will be covering those topics in our next reference book. So we will move forwardd to perform the independent sample t-test"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4if8ecM5s-WK"
      },
      "source": [
        "###Apply independent sample t-test"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cn3Xm47ItEan",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cd5ea253-8ee5-48ef-d568-0a8ad8ce5747"
      },
      "source": [
        "# H0 : There's no difference in mean\n",
        "# H1 : There's a difference in mean\n",
        "# Alpha : 0.05%\n",
        "alpha = 0.05\n",
        "statistic , p_value = stats.ttest_ind(sample_01['Price'],sample_02['Price'])\n",
        "if p_value > alpha:\n",
        "  print(f'Fail to reject Null Hypothesis p-value is {p_value}')\n",
        "else:\n",
        "  print('Reject Null Hypothesis')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Reject Null Hypothesis\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X7jm-cZ3t6yy"
      },
      "source": [
        "After performing t-test we can say that the means of two groups i.e 'Manual' and 'Automatic' Transmissions are statistically different. That means the price of usedcar does depend on Transmission type."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hkakyxoYunYo"
      },
      "source": [
        "### ANOVA testing to check whether the price of the cars of different fule type are same or not."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QAas_Rg0v28r",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 198
        },
        "outputId": "d81398af-dd0d-4461-a3a8-bb97d7d69b0e"
      },
      "source": [
        "usedcars.groupby('Fuel_Type')['Price'].describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>CNG</th>\n",
              "      <td>56.0</td>\n",
              "      <td>3.516786</td>\n",
              "      <td>1.434187</td>\n",
              "      <td>1.20</td>\n",
              "      <td>2.85</td>\n",
              "      <td>3.25</td>\n",
              "      <td>3.8225</td>\n",
              "      <td>8.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Diesel</th>\n",
              "      <td>3195.0</td>\n",
              "      <td>12.839934</td>\n",
              "      <td>12.823063</td>\n",
              "      <td>0.60</td>\n",
              "      <td>4.85</td>\n",
              "      <td>7.75</td>\n",
              "      <td>16.5000</td>\n",
              "      <td>160.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LPG</th>\n",
              "      <td>10.0</td>\n",
              "      <td>2.487000</td>\n",
              "      <td>0.648606</td>\n",
              "      <td>1.45</td>\n",
              "      <td>2.03</td>\n",
              "      <td>2.60</td>\n",
              "      <td>3.0375</td>\n",
              "      <td>3.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Petrol</th>\n",
              "      <td>2714.0</td>\n",
              "      <td>5.721054</td>\n",
              "      <td>7.384510</td>\n",
              "      <td>0.44</td>\n",
              "      <td>2.75</td>\n",
              "      <td>4.15</td>\n",
              "      <td>6.1700</td>\n",
              "      <td>120.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            count       mean        std   min   25%   50%      75%     max\n",
              "Fuel_Type                                                                 \n",
              "CNG          56.0   3.516786   1.434187  1.20  2.85  3.25   3.8225    8.35\n",
              "Diesel     3195.0  12.839934  12.823063  0.60  4.85  7.75  16.5000  160.00\n",
              "LPG          10.0   2.487000   0.648606  1.45  2.03  2.60   3.0375    3.20\n",
              "Petrol     2714.0   5.721054   7.384510  0.44  2.75  4.15   6.1700  120.00"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s-8Q8w7pwHjE"
      },
      "source": [
        "from the description we can say that the means are very different for different fuel types. Perform ANOVA testing as there are more than 2 groups and there's one 1 independent feature fuel_type. So we will use One-Way-Anova here."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VWaRNvMZvALu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "37ed6570-61ff-48dc-9b30-5c26f01116ea"
      },
      "source": [
        "#perfrom one way annova using stats module from scipy library\n",
        "#H0 : There is no difference in the mean\n",
        "#H1 : There is a difference in the mean\n",
        "#Alpha : 0.05\n",
        "\n",
        "alpha = 0.05\n",
        "Stats,p_value = stats.f_oneway(usedcars['Price'][usedcars['Fuel_Type']=='CNG'],\n",
        "                               usedcars['Price'][usedcars['Fuel_Type']=='Diesel'],\n",
        "                               usedcars['Price'][usedcars['Fuel_Type']=='LPG'],\n",
        "                               usedcars['Price'][usedcars['Fuel_Type']=='Petrol'])\n",
        "\n",
        "if p_value > alpha :\n",
        "  print(f' Failed to reject null hypothesis \\n Weather situation have no impact on bike rentals \\n p-value : {p_value}')\n",
        "else:\n",
        "  print(f' Reject null hypothesis \\n Weather situation has impact on bike rentals \\n p-value : {p_value}')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " Reject null hypothesis \n",
            " Weather situation has impact on bike rentals \n",
            " p-value : 1.1802135570669754e-139\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "20GOWZlhwzGP"
      },
      "source": [
        "After Performing one-way anova we can say that the different fuel types does have impact on the price of usedcars. The price of the cars does depend on Fuel type. What we observed in our sample is not due to random chance, the differences are statistically significant."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aHAmb-LNcNRj"
      },
      "source": [
        "###Transformation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0wcBxCU3cRzY"
      },
      "source": [
        "usedcars_t = pd.get_dummies(usedcars,drop_first=True)  #apply get dummies on categorical features"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b2Cx7-67c1lF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "outputId": "26bf9640-bb4f-4717-d13c-03ee216c12cd"
      },
      "source": [
        "usedcars_t.head()  #check the head"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>Price</th>\n",
              "      <th>Location_Bangalore</th>\n",
              "      <th>Location_Chennai</th>\n",
              "      <th>Location_Coimbatore</th>\n",
              "      <th>Location_Delhi</th>\n",
              "      <th>Location_Hyderabad</th>\n",
              "      <th>Location_Jaipur</th>\n",
              "      <th>Location_Kochi</th>\n",
              "      <th>Location_Kolkata</th>\n",
              "      <th>Location_Mumbai</th>\n",
              "      <th>Location_Pune</th>\n",
              "      <th>Fuel_Type_Diesel</th>\n",
              "      <th>Fuel_Type_LPG</th>\n",
              "      <th>Fuel_Type_Petrol</th>\n",
              "      <th>Transmission_Manual</th>\n",
              "      <th>Owner_Type_Fourth &amp; Above</th>\n",
              "      <th>Owner_Type_Second</th>\n",
              "      <th>Owner_Type_Third</th>\n",
              "      <th>Manufacturer_Audi</th>\n",
              "      <th>Manufacturer_BMW</th>\n",
              "      <th>Manufacturer_Bentley</th>\n",
              "      <th>Manufacturer_Chevrolet</th>\n",
              "      <th>Manufacturer_Datsun</th>\n",
              "      <th>Manufacturer_Fiat</th>\n",
              "      <th>Manufacturer_Force</th>\n",
              "      <th>Manufacturer_Ford</th>\n",
              "      <th>Manufacturer_Honda</th>\n",
              "      <th>Manufacturer_Hyundai</th>\n",
              "      <th>Manufacturer_ISUZU</th>\n",
              "      <th>Manufacturer_Isuzu</th>\n",
              "      <th>Manufacturer_Jaguar</th>\n",
              "      <th>Manufacturer_Jeep</th>\n",
              "      <th>Manufacturer_Lamborghini</th>\n",
              "      <th>Manufacturer_Land</th>\n",
              "      <th>Manufacturer_Mahindra</th>\n",
              "      <th>Manufacturer_Maruti</th>\n",
              "      <th>Manufacturer_Mercedes-Benz</th>\n",
              "      <th>Manufacturer_Mini</th>\n",
              "      <th>Manufacturer_Mitsubishi</th>\n",
              "      <th>Manufacturer_Nissan</th>\n",
              "      <th>Manufacturer_Porsche</th>\n",
              "      <th>Manufacturer_Renault</th>\n",
              "      <th>Manufacturer_Skoda</th>\n",
              "      <th>Manufacturer_Smart</th>\n",
              "      <th>Manufacturer_Tata</th>\n",
              "      <th>Manufacturer_Toyota</th>\n",
              "      <th>Manufacturer_Volkswagen</th>\n",
              "      <th>Manufacturer_Volvo</th>\n",
              "      <th>Age_1</th>\n",
              "      <th>Age_2</th>\n",
              "      <th>Age_3</th>\n",
              "      <th>Age_4</th>\n",
              "      <th>Age_5</th>\n",
              "      <th>Age_6</th>\n",
              "      <th>Age_7</th>\n",
              "      <th>Age_8</th>\n",
              "      <th>Age_9</th>\n",
              "      <th>Age_10</th>\n",
              "      <th>Age_11</th>\n",
              "      <th>Age_12</th>\n",
              "      <th>Age_13</th>\n",
              "      <th>Age_14</th>\n",
              "      <th>Age_15</th>\n",
              "      <th>Age_16</th>\n",
              "      <th>Age_17</th>\n",
              "      <th>Age_18</th>\n",
              "      <th>Age_19</th>\n",
              "      <th>Age_20</th>\n",
              "      <th>Age_21</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>72000</td>\n",
              "      <td>26.60</td>\n",
              "      <td>998</td>\n",
              "      <td>58.16</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.75</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>41000</td>\n",
              "      <td>19.67</td>\n",
              "      <td>1582</td>\n",
              "      <td>126.20</td>\n",
              "      <td>5.0</td>\n",
              "      <td>12.50</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46000</td>\n",
              "      <td>18.20</td>\n",
              "      <td>1199</td>\n",
              "      <td>88.70</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.50</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>87000</td>\n",
              "      <td>20.77</td>\n",
              "      <td>1248</td>\n",
              "      <td>88.76</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.00</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>40670</td>\n",
              "      <td>15.20</td>\n",
              "      <td>1968</td>\n",
              "      <td>140.80</td>\n",
              "      <td>5.0</td>\n",
              "      <td>17.74</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Kilometers_Driven  Mileage  Engine   Power  ...  Age_18  Age_19  Age_20  Age_21\n",
              "0              72000    26.60     998   58.16  ...       0       0       0       0\n",
              "1              41000    19.67    1582  126.20  ...       0       0       0       0\n",
              "2              46000    18.20    1199   88.70  ...       0       0       0       0\n",
              "3              87000    20.77    1248   88.76  ...       0       0       0       0\n",
              "4              40670    15.20    1968  140.80  ...       0       0       0       0\n",
              "\n",
              "[5 rows x 74 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pudt8IgpIshU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 354
        },
        "outputId": "2b158b73-7797-4723-c1ed-01bc7bb129ba"
      },
      "source": [
        "sns.distplot(usedcars_t['Mileage'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f86910534a8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pux-jBG5cqeS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "outputId": "70541b59-e0ce-43f3-d0eb-26d1dd77a63a"
      },
      "source": [
        "#scale the numerical features\n",
        "num_cols = ['Kilometers_Driven','Mileage','Engine','Power','Seats']\n",
        "\n",
        "for i in num_cols:\n",
        "  usedcars_t[i] = scale(usedcars_t[i])\n",
        "usedcars_t.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>Price</th>\n",
              "      <th>Location_Bangalore</th>\n",
              "      <th>Location_Chennai</th>\n",
              "      <th>Location_Coimbatore</th>\n",
              "      <th>Location_Delhi</th>\n",
              "      <th>Location_Hyderabad</th>\n",
              "      <th>Location_Jaipur</th>\n",
              "      <th>Location_Kochi</th>\n",
              "      <th>Location_Kolkata</th>\n",
              "      <th>Location_Mumbai</th>\n",
              "      <th>Location_Pune</th>\n",
              "      <th>Fuel_Type_Diesel</th>\n",
              "      <th>Fuel_Type_LPG</th>\n",
              "      <th>Fuel_Type_Petrol</th>\n",
              "      <th>Transmission_Manual</th>\n",
              "      <th>Owner_Type_Fourth &amp; Above</th>\n",
              "      <th>Owner_Type_Second</th>\n",
              "      <th>Owner_Type_Third</th>\n",
              "      <th>Manufacturer_Audi</th>\n",
              "      <th>Manufacturer_BMW</th>\n",
              "      <th>Manufacturer_Bentley</th>\n",
              "      <th>Manufacturer_Chevrolet</th>\n",
              "      <th>Manufacturer_Datsun</th>\n",
              "      <th>Manufacturer_Fiat</th>\n",
              "      <th>Manufacturer_Force</th>\n",
              "      <th>Manufacturer_Ford</th>\n",
              "      <th>Manufacturer_Honda</th>\n",
              "      <th>Manufacturer_Hyundai</th>\n",
              "      <th>Manufacturer_ISUZU</th>\n",
              "      <th>Manufacturer_Isuzu</th>\n",
              "      <th>Manufacturer_Jaguar</th>\n",
              "      <th>Manufacturer_Jeep</th>\n",
              "      <th>Manufacturer_Lamborghini</th>\n",
              "      <th>Manufacturer_Land</th>\n",
              "      <th>Manufacturer_Mahindra</th>\n",
              "      <th>Manufacturer_Maruti</th>\n",
              "      <th>Manufacturer_Mercedes-Benz</th>\n",
              "      <th>Manufacturer_Mini</th>\n",
              "      <th>Manufacturer_Mitsubishi</th>\n",
              "      <th>Manufacturer_Nissan</th>\n",
              "      <th>Manufacturer_Porsche</th>\n",
              "      <th>Manufacturer_Renault</th>\n",
              "      <th>Manufacturer_Skoda</th>\n",
              "      <th>Manufacturer_Smart</th>\n",
              "      <th>Manufacturer_Tata</th>\n",
              "      <th>Manufacturer_Toyota</th>\n",
              "      <th>Manufacturer_Volkswagen</th>\n",
              "      <th>Manufacturer_Volvo</th>\n",
              "      <th>Age_1</th>\n",
              "      <th>Age_2</th>\n",
              "      <th>Age_3</th>\n",
              "      <th>Age_4</th>\n",
              "      <th>Age_5</th>\n",
              "      <th>Age_6</th>\n",
              "      <th>Age_7</th>\n",
              "      <th>Age_8</th>\n",
              "      <th>Age_9</th>\n",
              "      <th>Age_10</th>\n",
              "      <th>Age_11</th>\n",
              "      <th>Age_12</th>\n",
              "      <th>Age_13</th>\n",
              "      <th>Age_14</th>\n",
              "      <th>Age_15</th>\n",
              "      <th>Age_16</th>\n",
              "      <th>Age_17</th>\n",
              "      <th>Age_18</th>\n",
              "      <th>Age_19</th>\n",
              "      <th>Age_20</th>\n",
              "      <th>Age_21</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.145555</td>\n",
              "      <td>1.862377</td>\n",
              "      <td>-1.037638</td>\n",
              "      <td>-0.959494</td>\n",
              "      <td>-0.344705</td>\n",
              "      <td>1.75</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.193055</td>\n",
              "      <td>0.329673</td>\n",
              "      <td>-0.065903</td>\n",
              "      <td>0.268475</td>\n",
              "      <td>-0.344705</td>\n",
              "      <td>12.50</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.138440</td>\n",
              "      <td>0.004554</td>\n",
              "      <td>-0.703188</td>\n",
              "      <td>-0.408315</td>\n",
              "      <td>-0.344705</td>\n",
              "      <td>4.50</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.309398</td>\n",
              "      <td>0.572960</td>\n",
              "      <td>-0.621656</td>\n",
              "      <td>-0.407232</td>\n",
              "      <td>2.127816</td>\n",
              "      <td>6.00</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.196659</td>\n",
              "      <td>-0.658954</td>\n",
              "      <td>0.576374</td>\n",
              "      <td>0.531972</td>\n",
              "      <td>-0.344705</td>\n",
              "      <td>17.74</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Kilometers_Driven   Mileage    Engine  ...  Age_19  Age_20  Age_21\n",
              "0           0.145555  1.862377 -1.037638  ...       0       0       0\n",
              "1          -0.193055  0.329673 -0.065903  ...       0       0       0\n",
              "2          -0.138440  0.004554 -0.703188  ...       0       0       0\n",
              "3           0.309398  0.572960 -0.621656  ...       0       0       0\n",
              "4          -0.196659 -0.658954  0.576374  ...       0       0       0\n",
              "\n",
              "[5 rows x 74 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NQpTtQW5jsuY"
      },
      "source": [
        "#split the dependent and independent variables\n",
        "X = usedcars_t.drop('Price',axis=1)\n",
        "Y = usedcars_t['Price']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e2MYI8armoIE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7126f5db-fb8a-47de-d52d-093e48fbf303"
      },
      "source": [
        "print(len(X),len(Y))  #check the length"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "5975 5975\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tHLJujabItic"
      },
      "source": [
        "#split the data into train and test\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test = train_test_split(X, Y, test_size = 0.3, random_state = 42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yctbCS_vm5Su",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "06596c3e-55aa-4829-e489-e7b4f6044872"
      },
      "source": [
        "print(len(x_train),len(y_train))  #check the train length"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "4182 4182\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9aFgPpagm5XH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aa568079-8fca-42b2-9818-580afcdce0a8"
      },
      "source": [
        "print(len(x_test),len(y_test)) #check the test length"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1793 1793\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ij63qxl1Eznc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2fe50f2d-5950-432e-8b1e-337bb4f4f6dc"
      },
      "source": [
        "#apply RandomForestRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "model = RandomForestRegressor()\n",
        "fitting = model.fit(x_train,y_train)\n",
        "prediction = model.predict(x_test)\n",
        "accuracy = model.score(x_test,y_test)\n",
        "accuracy"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8330334484650139"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u1St1_bR8xKe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "outputId": "f247fe2a-1047-47e4-8d9f-447b722a876d"
      },
      "source": [
        "#check predicted vs actual plot\n",
        "plt.figure(figsize=(12,6))\n",
        "plt.plot(prediction, label='prediction',marker='.')\n",
        "plt.plot(y_test.values,label = 'actual')\n",
        "plt.title('Predicted Vs Actual')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TrxnFe4_xDDr"
      },
      "source": [
        "In this Notebook we have used different types of hypothesis testing. Next We will be coming up with the ways we can use these techniques to slect best feature and also look at different techniques for feature slection which can improve our model accuracy. Thank You."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "832OamEXiY8t"
      },
      "source": [],
      "execution_count": null,
      "outputs": []
    }
  ]
}
